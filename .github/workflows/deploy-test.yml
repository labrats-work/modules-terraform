name: 'Test Deploy'

permissions:
  contents: read

on:
  workflow_call:
    inputs:
      IMAGE:
        type: string
        description: Hetzner Image to Use
        required: true
      TESTPATH:
        type: string
        description: Test to run
        required: true

jobs:
  terraform:
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/labrats-work/ops-images/omnibus:latest

    defaults:
      run:
        shell: sh

    steps:
    - 
      name: Checkout
      uses: actions/checkout@v3
    - 
      name: Create keypair for test.
      run: |
        ssh-keygen -t ed25519 -N '' -f id_ed25519
        xargs -a id_ed25519 -I{} -d'\n' echo ::add-mask::{}
        xargs -a id_ed25519.pub -I{} -d'\n' echo ::add-mask::{}
    - 
      name: Load keypair for test.
      run: |
        echo "Loading KEYFILE \"id_ed25519\" into GITHUB_ENV."
        echo 'KEYFILE<<EOF' >> $GITHUB_ENV
        cat id_ed25519 >> $GITHUB_ENV
        echo EOF >> $GITHUB_ENV

        echo "Loading PUBKEYFILE \"id_ed25519.pub\" into GITHUB_ENV."
        echo 'PUBKEYFILE<<EOF' >> $GITHUB_ENV
        cat id_ed25519.pub >> $GITHUB_ENV
        echo EOF >> $GITHUB_ENV
    - 
      name: Create vars file for test.
      run: |
        cd ${{ inputs.TESTPATH }}
        echo "hcloud_token = \"${{ secrets.HETZNER_TOKEN }}\"" >> default.tfvars
        echo "github_public_key = \"${{ env.PUBKEYFILE }}\"" >> default.tfvars
    - 
      name: Update config files for test.
      run: |
        cd ${{ inputs.TESTPATH }}
        sed -i 's|hetzner.node|${{ github.sha }}-${{ inputs.IMAGE }}-node|' files/config.json
        sed -i 's|hetzner.network|${{ github.sha }}-${{ inputs.IMAGE }}-net|' files/config.json
        sed -i 's|hetzner.image|${{ inputs.IMAGE }}|' files/config.json
    - 
      name: Terraform Init
      run: terraform -chdir=${{ inputs.TESTPATH }} init -backend-config=config.remote.tfbackend
      env:
        TF_CLI_CONFIG_FILE: default.tfrc
    - 
      name: Terraform Plan
      run: terraform -chdir=${{ inputs.TESTPATH }} plan --var-file=default.tfvars -out=tfplan -input=false
      env:
        TF_CLI_CONFIG_FILE: default.tfrc
    - 
      name: Terraform Apply
      run: |      
        eval `ssh-agent`
        echo "${KEYFILE}" | ssh-add -
        terraform -chdir=${{ inputs.TESTPATH }} apply tfplan
    - 
      name: Terraform Plan
      run: terraform -chdir=${{ inputs.TESTPATH }} destroy --var-file=default.tfvars -auto-approve -input=false
      env:
        TF_CLI_CONFIG_FILE: default.tfrc